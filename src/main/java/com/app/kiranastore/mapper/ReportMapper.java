package com.app.kiranastore.mapper;

import com.app.kiranastore.dto.DailyReportDto;
import com.app.kiranastore.dto.ReportDto;
import com.app.kiranastore.enums.TransactionType;
import com.app.kiranastore.model.Transaction;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;

@Service
public class ReportMapper {
    @Autowired
    private ModelMapper mm;

    public DailyReportDto toDailyReport(List<ReportDto> reportDtos, BigDecimal[] balance){
        DailyReportDto dto = new DailyReportDto();

        // Set the starting balance that was generated by subtracting in `EntitytoReportDTO`
        dto.setStartingBalance(balance[0]);

        // Set Closing balance
        dto.setClosingBalance(balance[1]);

        // Set the List of Transactions
        dto.setReportDto(reportDtos);

        return dto;
    }
    public ReportDto EntitytoReportDTO(Transaction transaction, BigDecimal[] currBalance, BigDecimal conversionRate){
        ReportDto dto = new ReportDto();
        TransactionType transactionType = transaction.getTransactionType();

        // Convert amount to match currency
        BigDecimal convertedAmount = transaction.getAmount().multiply(conversionRate);

        // If Transaction type is CREDIT then the amount should be deducted from the balance to get the starting balance and vice versa if DEBIT.
        if(transactionType == TransactionType.CREDIT)
            currBalance[0] = currBalance[0].subtract(convertedAmount);
        else
            currBalance[0] = currBalance[0].add(convertedAmount);


        // Map all mappable properties
        dto = mm.map(transaction, ReportDto.class);

        // Update amount currency
        dto.setAmount(dto.getAmount().multiply(conversionRate));

        // Set balance till current transaction
        dto.setBalance(currBalance[0]);

        return dto;
    }

}
